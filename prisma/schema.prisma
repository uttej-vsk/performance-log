// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Performance Tracker Web App - Prisma Schema
// See api.md and architecture.md for model details

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  timezone      String    @default("UTC")
  theme         String    @default("system")
  weeklyGoal    Int       @default(5)
  password      String?   // For credentials provider

  // New fields for user profile
  jobTitle      String?
  jobDescription String?
  reviewDate    DateTime?

  accounts          Account[]
  sessions          Session[]
  workEntries       WorkEntry[]
  conversations     Conversation[]
  performanceReviews PerformanceReview[]
  userPreferences   UserPreference[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Main application tables
model WorkEntry {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String
  impact            String?
  businessValue     String?
  technicalDetails  String?
  stakeholders      String?  // JSON string for SQLite
  metrics           String?  // JSON string for SQLite
  impactScore       Float    @default(0)
  complexity        Int      @default(1) // 1-5 scale
  workDate          DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags              WorkEntryTag[]
  aiInteractions    AiInteraction[]
  reviewEntries     ReviewEntry[]

  @@index([userId, workDate])
  @@index([userId, createdAt])
  @@index([userId, deletedAt])
  @@index([impactScore])
  @@map("work_entries")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String?
  description String?
  createdAt   DateTime @default(now())

  workEntries WorkEntryTag[]

  @@map("tags")
}

model WorkEntryTag {
  id          String @id @default(cuid())
  workEntryId String
  tagId       String

  workEntry WorkEntry @relation(fields: [workEntryId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([workEntryId, tagId])
  @@map("work_entry_tags")
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  status      String   @default("active") // active, archived, deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId, createdAt])
  @@index([userId, status])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String
  type           String   // user, assistant, system
  metadata       String?  // JSON string for SQLite
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("messages")
}

model AiInteraction {
  id          String   @id @default(cuid())
  userId      String
  workEntryId String?
  type        String   // analyze, question_generation, summarize
  prompt      String
  response    String
  metadata    String?  // JSON string for SQLite
  createdAt   DateTime @default(now())

  workEntry WorkEntry? @relation(fields: [workEntryId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([workEntryId])
  @@index([type])
  @@map("ai_interactions")
}

model PerformanceReview {
  id          String   @id @default(cuid())
  userId      String
  title       String
  periodStart DateTime
  periodEnd   DateTime
  template    String   @default("standard")
  content     String   // JSON string for SQLite
  summary     String?
  status      String   @default("draft") // draft, final, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewEntries ReviewEntry[]

  @@index([userId, periodStart, periodEnd])
  @@index([userId, status])
  @@map("performance_reviews")
}

model ReviewEntry {
  id                  String @id @default(cuid())
  performanceReviewId String
  workEntryId         String

  performanceReview PerformanceReview @relation(fields: [performanceReviewId], references: [id], onDelete: Cascade)
  workEntry         WorkEntry         @relation(fields: [workEntryId], references: [id], onDelete: Cascade)

  @@unique([performanceReviewId, workEntryId])
  @@map("review_entries")
}

model UserPreference {
  id     String @id @default(cuid())
  userId String
  key    String
  value  String  // JSON string for SQLite

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_preferences")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String?
  entityId  String?
  metadata  String?  // JSON string for SQLite
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([action])
  @@map("activity_logs")
}
